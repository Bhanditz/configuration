---

- name: Install packages
  apt:
    name: "{{ item }}"
    install_recommends: yes
    state: present
  with_items: "{{ mysql_packages }}"

- name: Copy TLS certificates
  copy: >
    content="{{ item.content }}" dest="{{ item.dest }}"
    owner="{{ mysql_cert_owner }}" group="{{ mysql_cert_group }}" mode=0444
  with_items:
    - { content: "{{ mysql_client_cert }}", dest: "{{ mysql_client_cert_path }}" }
    - { content: "{{ mysql_client_key  }}", dest: "{{ mysql_client_key_path }}" }
    - { content: "{{ mysql_ca_cert }}", dest: "{{ mysql_ca_cert_path }}" }
  when: mysql_client_cert != '' and mysql_client_key != '' and mysql_ca_cert != ''
  tags: ['mysql', 'temp:mysql', 'mysql:tls']

- name: Copy mysql-connect-tls script
  template: src=mysql-connect-tls dest=/usr/local/bin/mysql-connect-tls mode=0755
  when: mysql_client_cert != '' and mysql_client_key != '' and mysql_ca_cert != ''
  tags: ['mysql', 'temp:mysql', 'mysql:tls']

- name: create databases
  mysql_db:
    db: "{{ item }}"
    state: present
    encoding: utf8
    login_user: "{{ mysql_login_user }}"
    login_password: "{{ mysql_login_password }}"
    login_host: "{{ mysql_login_host }}"
    login_port: "{{ mysql_login_port }}"
    ssl_cert: "{{ (mysql_client_cert != '') | ternary(mysql_client_cert_path, omit) }}"
    ssl_key: "{{ (mysql_client_key != '') | ternary(mysql_client_key_path, omit) }}"
    ssl_ca: "{{ (mysql_ca_cert != '') | ternary(mysql_ca_cert_path, omit) }}"
  when: item != None and item != ''
  with_items: "{{ mysql_databases }}"
  tags: ['mysql', 'temp:mysql', 'mysql:databases']

- name: Hack, import the databases
  become: yes
  become_user: root
  shell: >
    mysqladmin -f drop edxapp;
    mysql -u root edxapp --execute='CREATE DATABASE `{{ item.name }}` DEFAULT CHARACTER SET {{ item.charset }};';
    mysql -D {{ item.name }} < staging-asustarbucks-ficus-migrated-smch.sql;
  args:
    chdir: /home/omar/staging-asustarbucks-ficus-edxapp
  with_items:
   - name: dashboard
     charset: utf8
   - name: ecommerce
     charset: utf8
   - name: edx_notes_api
     charset: utf8
   - name: edxapp
     charset: latin1
   - name: edxapp_csmh
     charset: utf8
   - name: reports
     charset: utf8
   - name: xqueue
     charset: latin1
  tags: ['mysql', 'temp:mysql']

- name: create database users
  mysql_user:
    name: "{{ item[0].user }}"
    password: "{{ item[0].pass }}"
    priv: "{{ item[0].db }}.*:ALL"
    append_privs: yes
    host: "{{ item[1] }}"
    login_user: "{{ mysql_login_user }}"
    login_password: "{{ mysql_login_password }}"
    login_host: "{{ mysql_login_host }}"
    login_port: "{{ mysql_login_port }}"
    ssl_cert: "{{ (mysql_client_cert != '') | ternary(mysql_client_cert_path, omit) }}"
    ssl_key: "{{ (mysql_client_key != '') | ternary(mysql_client_key_path, omit) }}"
    ssl_ca: "{{ (mysql_ca_cert != '') | ternary(mysql_ca_cert_path, omit) }}"
  when: item[0].db != None and item[0].db != ''
  with_nested:
    - "{{ mysql_database_users }}"
    - "{{ mysql_user_hosts }}"
  tags: ['mysql', 'temp:mysql', 'mysql:users']

- name: setup the migration db user
  mysql_user:
    name: "{{ COMMON_MYSQL_MIGRATE_USER }}"
    password: "{{ COMMON_MYSQL_MIGRATE_PASS }}"
    priv: "{{ item[0] }}.*:ALL"
    append_privs: yes
    host: "{{ item[1] }}"
    login_user: "{{ mysql_login_user }}"
    login_password: "{{ mysql_login_password }}"
    login_host: "{{ mysql_login_host }}"
    login_port: "{{ mysql_login_port }}"
    ssl_cert: "{{ (mysql_client_cert != '') | ternary(mysql_client_cert_path, omit) }}"
    ssl_key: "{{ (mysql_client_key != '') | ternary(mysql_client_key_path, omit) }}"
    ssl_ca: "{{ (mysql_ca_cert != '') | ternary(mysql_ca_cert_path, omit) }}"
  when: item[0] != None and item[0] != ''
  with_nested:
    - "{{ mysql_databases }}"
    - "{{ mysql_user_hosts }}"
  tags: ['mysql', 'temp:mysql', 'mysql:users']

- name: create api user for the analytics api
  mysql_user:
    name: "api001"
    password: "{{ ANALYTICS_API_DATABASES.default.PASSWORD }}"
    priv: '{{ ANALYTICS_API_DATABASES.default.NAME }}.*:ALL/reports.*:SELECT'
    host: "{{ item }}"
    login_user: "{{ mysql_login_user }}"
    login_password: "{{ mysql_login_password }}"
    login_host: "{{ mysql_login_host }}"
    login_port: "{{ mysql_login_port }}"
    ssl_cert: "{{ (mysql_client_cert != '') | ternary(mysql_client_cert_path, omit) }}"
    ssl_key: "{{ (mysql_client_key != '') | ternary(mysql_client_key_path, omit) }}"
    ssl_ca: "{{ (mysql_ca_cert != '') | ternary(mysql_ca_cert_path, omit) }}"
  with_items: "{{ mysql_user_hosts }}"
  when: ANALYTICS_API_SERVICE_CONFIG is defined
  tags: ['mysql', 'temp:mysql', 'mysql:users']

- name: create read-only reports user for the analytics-api
  mysql_user:
    name: reports001
    password: "{{ ANALYTICS_API_DATABASES.reports.PASSWORD }}"
    priv: '{{ ANALYTICS_API_DATABASES.reports.NAME }}.*:SELECT'
    host: "{{ item }}"
    login_user: "{{ mysql_login_user }}"
    login_password: "{{ mysql_login_password }}"
    login_host: "{{ mysql_login_host }}"
    login_port: "{{ mysql_login_port }}"
    ssl_cert: "{{ (mysql_client_cert != '') | ternary(mysql_client_cert_path, omit) }}"
    ssl_key: "{{ (mysql_client_key != '') | ternary(mysql_client_key_path, omit) }}"
    ssl_ca: "{{ (mysql_ca_cert != '') | ternary(mysql_ca_cert_path, omit) }}"
  with_items: "{{ mysql_user_hosts }}"
  when: ANALYTICS_API_SERVICE_CONFIG is defined
  tags: ['mysql', 'temp:mysql', 'mysql:users']

- name: create a database for the hive metastore
  mysql_db:
    db: "{{ HIVE_METASTORE_DATABASE.name }}"
    state: "present"
    encoding: "latin1"
    login_user: "{{ mysql_login_user }}"
    login_password: "{{ mysql_login_password }}"
    login_host: "{{ mysql_login_host }}"
    login_port: "{{ mysql_login_port }}"
    ssl_cert: "{{ (mysql_client_cert != '') | ternary(mysql_client_cert_path, omit) }}"
    ssl_key: "{{ (mysql_client_key != '') | ternary(mysql_client_key_path, omit) }}"
    ssl_ca: "{{ (mysql_ca_cert != '') | ternary(mysql_ca_cert_path, omit) }}"
  when: HIVE_METASTORE_DATABASE is defined
  tags: ['mysql', 'temp:mysql', 'mysql:databases']

- name: setup the edx-notes-api db user
  mysql_user:
    name: "{{ EDX_NOTES_API_MYSQL_DB_USER }}"
    password: "{{ EDX_NOTES_API_MYSQL_DB_PASS }}"
    priv: "{{ EDX_NOTES_API_MYSQL_DB_NAME }}.*:SELECT,INSERT,UPDATE,DELETE"
    host: "{{ item }}"
    login_user: "{{ mysql_login_user }}"
    login_password: "{{ mysql_login_password }}"
    login_host: "{{ mysql_login_host }}"
    login_port: "{{ mysql_login_port }}"
    ssl_cert: "{{ (mysql_client_cert != '') | ternary(mysql_client_cert_path, omit) }}"
    ssl_key: "{{ (mysql_client_key != '') | ternary(mysql_client_key_path, omit) }}"
    ssl_ca: "{{ (mysql_ca_cert != '') | ternary(mysql_ca_cert_path, omit) }}"
  with_items: "{{ mysql_user_hosts }}"
  when: EDX_NOTES_API_MYSQL_DB_USER is defined
  tags: ['mysql', 'temp:mysql', 'mysql:users']

- name: setup the read-only db user
  mysql_user:
    name: "{{ COMMON_MYSQL_READ_ONLY_USER }}"
    password: "{{ COMMON_MYSQL_READ_ONLY_PASS }}"
    priv: "*.*:SELECT"
    host: "{{ item }}"
    login_user: "{{ mysql_login_user }}"
    login_password: "{{ mysql_login_password }}"
    login_host: "{{ mysql_login_host }}"
    login_port: "{{ mysql_login_port }}"
    ssl_cert: "{{ (mysql_client_cert != '') | ternary(mysql_client_cert_path, omit) }}"
    ssl_key: "{{ (mysql_client_key != '') | ternary(mysql_client_key_path, omit) }}"
    ssl_ca: "{{ (mysql_ca_cert != '') | ternary(mysql_ca_cert_path, omit) }}"
  with_items: "{{ mysql_user_hosts }}"
  tags: ['mysql', 'temp:mysql', 'mysql:users']

- name: setup the admin db user
  mysql_user:
    name: "{{ COMMON_MYSQL_ADMIN_USER }}"
    password: "{{ COMMON_MYSQL_ADMIN_PASS }}"
    priv: "*.*:CREATE USER"
    host: "{{ item }}"
    login_user: "{{ mysql_login_user }}"
    login_password: "{{ mysql_login_password }}"
    login_host: "{{ mysql_login_host }}"
    login_port: "{{ mysql_login_port }}"
    ssl_cert: "{{ (mysql_client_cert != '') | ternary(mysql_client_cert_path, omit) }}"
    ssl_key: "{{ (mysql_client_key != '') | ternary(mysql_client_key_path, omit) }}"
    ssl_ca: "{{ (mysql_ca_cert != '') | ternary(mysql_ca_cert_path, omit) }}"
  with_items: "{{ mysql_user_hosts }}"
  tags: ['mysql', 'temp:mysql', 'mysql:users']

- name: grant access to table storing test data in output database
  mysql_user:
    user: "{{ ANALYTICS_PIPELINE_OUTPUT_DATABASE.username }}"
    password: "{{ ANALYTICS_PIPELINE_OUTPUT_DATABASE.password }}"
    host: "{{ item }}"
    priv: "acceptance%.*:ALL"
    append_privs: yes
    login_user: "{{ mysql_login_user }}"
    login_password: "{{ mysql_login_password }}"
    login_host: "{{ mysql_login_host }}"
    login_port: "{{ mysql_login_port }}"
    ssl_cert: "{{ (mysql_client_cert != '') | ternary(mysql_client_cert_path, omit) }}"
    ssl_key: "{{ (mysql_client_key != '') | ternary(mysql_client_key_path, omit) }}"
    ssl_ca: "{{ (mysql_ca_cert != '') | ternary(mysql_ca_cert_path, omit) }}"
  with_items: "{{ mysql_user_hosts }}"
  when: ANALYTICS_PIPELINE_OUTPUT_DATABASE is defined
  tags: ['mysql', 'temp:mysql', 'mysql:users']

#- name: Hack, SQL migrations for python social auth
#  shell: >
#    sudo mysql -u root edxapp --execute='INSERT INTO django_migrations (`app`, `name`, `applied`) VALUES ("default", "0001_initial", NOW());';
#    sudo mysql -u root edxapp --execute='INSERT INTO django_migrations (`app`, `name`, `applied`) VALUES ("default", "0002_add_related_name", NOW());';
#    sudo mysql -u root edxapp --execute='INSERT INTO django_migrations (`app`, `name`, `applied`) VALUES ("default", "0003_alter_email_max_length", NOW());';
#    sudo mysql -u root edxapp --execute='INSERT INTO django_migrations (`app`, `name`, `applied`) VALUES ("default", "0004_auto_20160423_0400", NOW());';
#    sudo mysql -u root edxapp --execute='INSERT INTO django_migrations (`app`, `name`, `applied`) VALUES ("default", "0005_auto_20160727_2333", NOW());';
#
#    sudo mysql -u root edxapp --execute='INSERT INTO django_migrations (`app`, `name`, `applied`) VALUES ("social_auth", "0001_initial", NOW());';
#    sudo mysql -u root edxapp --execute='INSERT INTO django_migrations (`app`, `name`, `applied`) VALUES ("social_auth", "0002_add_related_name", NOW());';
#    sudo mysql -u root edxapp --execute='INSERT INTO django_migrations (`app`, `name`, `applied`) VALUES ("social_auth", "0003_alter_email_max_length", NOW());';
#    sudo mysql -u root edxapp --execute='INSERT INTO django_migrations (`app`, `name`, `applied`) VALUES ("social_auth", "0004_auto_20160423_0400", NOW());';
#    sudo mysql -u root edxapp --execute='INSERT INTO django_migrations (`app`, `name`, `applied`) VALUES ("social_auth", "0005_auto_20160727_2333", NOW());';
#
#    sudo mysql -u root edxapp --execute='INSERT INTO django_migrations (`app`, `name`, `applied`) VALUES ("social_django", "0001_initial", NOW());';
#    sudo mysql -u root edxapp --execute='INSERT INTO django_migrations (`app`, `name`, `applied`) VALUES ("social_django", "0002_add_related_name", NOW());';
#    sudo mysql -u root edxapp --execute='INSERT INTO django_migrations (`app`, `name`, `applied`) VALUES ("social_django", "0003_alter_email_max_length", NOW());';
#    sudo mysql -u root edxapp --execute='INSERT INTO django_migrations (`app`, `name`, `applied`) VALUES ("social_django", "0004_auto_20160423_0400", NOW());';
#    sudo mysql -u root edxapp --execute='INSERT INTO django_migrations (`app`, `name`, `applied`) VALUES ("social_django", "0005_auto_20160727_2333", NOW());';
#    sudo mysql -u root edxapp --execute='ALTER TABLE social_auth_association ADD UNIQUE KEY `social_auth_association_server_url_17bf7e87f2968244_uniq` (`server_url`,`handle`);';
#  args:
#    executable: /bin/bash
#  tags: ['mysql', 'temp:mysql']

#- name: Hack, migrate the social_auth
#  shell: >
#    /edx/bin/edxapp-migrate-lms social_django 0004;
#  args:
#    executable: /bin/bash
#  tags: ['mysql', 'temp:mysql']

#- name: Hack, migrate the social_auth
#  become: true
#  become_user: edxapp
#  shell: >
#    source ~/edxapp_env && cd ~/edx-platform && python manage.py lms --settings=aws_appsembler migrate --noinput social_django;
#  ignore_errors: True
#  tags: ['mysql', 'temp:mysql']

#- name: Hack, migrate the social_auth, again
#  become: true
#  become_user: edxapp
#  shell: >
#    source ~/edxapp_env && cd ~/edx-platform;
#    python manage.py lms --settings=aws_appsembler migrate --noinput social_django;
#  args:
#    executable: /bin/bash
#  tags: ['mysql', 'temp:mysql']

- name: Hack, migrate the badges
  become: true
  become_user: edxapp
  shell: >
    source ~/edxapp_env && cd ~/edx-platform;
    python manage.py lms --settings=aws_appsembler migrate --noinput badges 0004 --fake;
  args:
    executable: /bin/bash
  tags: ['mysql', 'temp:mysql']

- name: Hack, migrate the djcelery
  become: true
  become_user: edxapp
  shell: >
    source ~/edxapp_env && cd ~/edx-platform;
    python manage.py lms --settings=aws_appsembler migrate --noinput djcelery 0001 --fake;
  args:
    executable: /bin/bash
  tags: ['mysql', 'temp:mysql']

- name: Hack, migrate the custom_reg_form
  become: true
  become_user: edxapp
  shell: >
    source ~/edxapp_env && cd ~/edx-platform;
    python manage.py lms --settings=aws_appsembler migrate --noinput custom_reg_form 0002 --fake;
    python manage.py lms --settings=aws_appsembler migrate --noinput custom_reg_form 0001;
    python manage.py lms --settings=aws_appsembler migrate --noinput custom_reg_form 0002;
  args:
    executable: /bin/bash
  tags: ['mysql', 'temp:mysql']

#- name: Hack, run the full LMS migrations
#  become: true
#  become_user: edxapp
#  shell: >
#    source ~/edxapp_env && cd ~/edx-platform;
#    python manage.py lms --settings=aws_appsembler migrate --noinput;
#  args:
#    executable: /bin/bash
#  tags: ['mysql', 'temp:mysql']
#
#- name: Hack, run the full CMS migrations
#  become: true
#  become_user: edxapp
#  shell: >
#    source ~/edxapp_env && cd ~/edx-platform;
#    python manage.py cms --settings=aws_appsembler migrate --noinput;
#  args:
#    executable: /bin/bash
#  tags: ['mysql', 'temp:mysql']

- name: Hack, run the full {{ item }} migrations
  become: true
  shell: /edx/bin/edxapp-migrate-{{ item }}
  with_items:
    - lms
    - cms
  tags: ['mysql', 'temp:mysql']
