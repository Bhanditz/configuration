# CONFIGURE NGINX 
# SYNC LOCAL SCORM CONTENT PACKAGES WITH S3 IF NOT STORED THERE TO BEGIN WITH

- include_vars: "/edx/app/edx_ansible/edx_ansible/playbooks/roles/common_vars/defaults/main.yml"
- include_vars: "/edx/app/edx_ansible/edx_ansible/playbooks/roles/edxapp/defaults/main.yml"

- name: create all service directories
  file: >
    path="{{ item.value.path }}"
    state="directory"
    owner="{{ item.value.owner }}"
    group="{{ item.value.group }}"
    mode="{{ item.value.mode }}"
  with_dict: scorm_dirs
  when: EDXAPP_XBLOCK_SETTINGS.ScormXBlock

- name: create scorm player asset directories
  file: >
    path="{{ scorm_player_dir.path_root }}/{{item}}"
    state="directory"
    owner="{{ scorm_player_dir.owner }}"
    group="{{ scorm_player_dir.group }}"
    mode="{{ scorm_player_dir.mode }}"
  with_items: EDXAPP_XBLOCK_SETTINGS.ScormXBlock.SCORM_PLAYER_BACKENDS.keys()
  when: EDXAPP_XBLOCK_SETTINGS.ScormXBlock.SCORM_PLAYER_BACKENDS

- name: install uuencode for emailing errors
  apt: >
    pkg=sharutils
    state=present
    update_cache=yes  
  when: SCORM_S3_BACKUP
  
- name: create s3 config for SCORM backup
  template: >
    dest={{ scorm_dirs.home.path }}/.s3cfg
    src=.s3cfg.j2 mode=0644 owner=root group=root
  when: SCORM_S3_BACKUP

- name: create s3 scorm sync script
  template: >
    dest={{ scorm_s3_sync_script }}
    src=sync-scorm-content-to-s3.j2 mode=0755 owner=root group=root
  when: SCORM_S3_BACKUP

- name: create symlink for s3 log sync script
  file: >
    state=link
    src={{ scorm_s3_sync_script }}
    dest={{ COMMON_BIN_DIR }}/{{ scorm_s3_sync_script|basename }}
  when: SCORM_S3_BACKUP

  # cron job runs the s3 sync script
  # this job will log its output to /var/log/scorm
- name: cronjob for s3 scorm sync
  cron:
    name: "cronjob for s3 scorm sync"
    user: root
    minute: 0
    job: "{{ scorm_s3_sync_script }}"
  when: SCORM_S3_BACKUP
